name: CI Pipeline

on: 
  push:
    branches:
      - main  

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          set -e
          echo "Upgrading pip and installing dependencies..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Setup DVC with S3 Support
        run: |
          set -e
          python -m pip install "dvc[s3]"
          dvc version
          dvc doctor

      - name: Configure AWS Credentials
        run: |
          set -e
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}" --profile default
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}" --profile default
          aws configure set region "${{ secrets.AWS_REGION }}" --profile default

      - name: Verify AWS Authentication
        run: |
          set -e
          aws sts get-caller-identity --profile default
          aws s3 ls s3://audiocollection/path/to/data --profile default || echo "S3 path might not exist."

      - name: Initialize DVC
        run: |
          set -e
          dvc init --quiet || true  # Prevent error if already initialized

      - name: Configure DVC Remote (AWS S3)
        run: |
          set -e
          dvc remote add -d myremote s3://audiocollection/path/to/data --force
          dvc remote modify myremote region "${{ secrets.AWS_REGION }}"
          dvc remote modify myremote profile default

      - name: Fetch & Pull DVC Data
        run: |
          set -e
          if ls *.dvc 1> /dev/null 2>&1; then
            dvc pull || echo "DVC pull failed!"
          fi

      - name: Run DVC Pipeline
        run: |
          set -e
          dvc repro

      # Install Railway CLI
      - name: Install Railway CLI
        run: npm install -g @railway/cli

      # Authenticate with Railway using RAILWAY_TOKEN
      - name: Authenticate Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          set -e
          railway auth --token "$RAILWAY_TOKEN"
          railway whoami

      # Link and Deploy to Railway
      - name: Link and Deploy to Railway
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          set -e
          railway link "$RAILWAY_PROJECT_ID"
          railway up

      # Install dependencies on Railway
      - name: Install Dependencies on Railway
        run: railway run pip install -r requirements.txt

      # Start Flask App
      - name: Start Flask App
        run: |
          set -e
          gunicorn app:app --bind 0.0.0.0:$PORT
